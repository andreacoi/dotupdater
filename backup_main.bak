    // retrieves config_dir
    let config_dir = get_config_dir().expect("Can't find config user dir.");
    // retrieves home_dir
    let homedir = get_user_home_dir().expect("Can't find home dir. Sure your OS is OK?");
    // read_to_string helps me to convert a stream from a file in a text to be read.
    let config_data = fs::read_to_string("config.toml")
        .expect("Unable to read TOML file. Is the correct path, isn't it?");
    // deserialize config_data starting from a simple string.
    let config: Config =
        toml::de::from_str(&config_data).expect("Unable to read single configurations.");
    // bind config.config.config_base_path to the variable config_base_path
    let config_base_path: String = config_dir;
    // same story for logfiles_path
    // create log file if not exists, otherwise append logs to that file.
    let mut log_file = fs::OpenOptions::new()
        .create(true)
        .append(true)
        .open(logfiles_path)
        .expect("Cannot open log file.");
    // check_internet_connection
    wait_for_connection();
    // iterate over each repo in config files
    for repo_config in &config.repositories {
        let full_path: String = format!("{}{}", config_base_path, repo_config.path);
        let log_date: String = get_task_datetime();
        // write which repo is processing with date time information
        writeln!(
            log_file,
            "[I] {} - Processing repository: {}",
            log_date, full_path
        )
        .unwrap();
        // start to fetch at every repo
        match fetch(&full_path, &repo_config.branch) {
            Ok(_) => {
                let log_date: String = get_task_datetime();
                // if fetch result is: up-to-date skip and write process to logfile.
                writeln!(
                    log_file,
                    "[!] {} - No updates for branch {}",
                    log_date, &repo_config.branch
                );
            }
            Err(e) => {
                // fetch method retrieves some update, behave accordingly but, write on log.
                let log_date: String = get_task_datetime();
                writeln!(
                    log_file,
                    "[II] {} - Fetching updates for {}: {}",
                    log_date, &repo_config.branch, e
                );
                match pull(&full_path, &repo_config.branch) {
                    Ok(_) => {
                        let log_date: String = get_task_datetime();
                        writeln!(
                            log_file,
                            "[U] {} - Pulling updates for {}",
                            log_date, &repo_config.branch
                        );
                    }
                    Err(e) => {
                        let log_date: String = get_task_datetime();
                        writeln!(
                            log_file,
                            "[E] {} - Failed to pulling updates for {}: {}",
                            log_date, &repo_config.branch, e
                        );
                    }
                }
            }
        }
    }

